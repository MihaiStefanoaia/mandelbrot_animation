#include <stdlib.h>
#include <stdio.h>

void palette8(unsigned char* container, int type)
{
    if(type == 0)
    {
        unsigned char palette[] = { 0, 0, 0, 0, 205, 205, 205, 0, 206, 206, 206, 0, 206, 206, 206, 0, 206, 206, 206, 0, 207, 207, 207, 0, 206, 206, 206, 0, 206, 206, 206, 0, 207, 207, 207, 0, 206, 206, 206, 0, 206, 206, 206, 0, 205, 205, 206, 0, 206, 206, 206, 0, 206, 206, 206, 0, 206, 206, 206, 0, 206, 206, 206, 0, 206, 206, 206, 0, 206, 206, 206, 0, 205, 205, 206, 0, 206, 206, 206, 0, 206, 206, 206, 0, 205, 205, 206, 0, 205, 205, 206, 0, 206, 206, 206, 0, 206, 206, 206, 0, 205, 205, 205, 0, 205, 205, 206, 0, 205, 205, 206, 0, 205, 205, 206, 0, 205, 205, 206, 0, 205, 205, 206, 0, 205, 205, 206, 0, 205, 205, 206, 0, 205, 205, 206, 0, 204, 204, 206, 0, 205, 205, 206, 0, 205, 205, 206, 0, 204, 204, 206, 0, 204, 204, 205, 0, 204, 204, 206, 0, 203, 203, 205, 0, 203, 203, 205, 0, 203, 203, 205, 0, 204, 204, 205, 0, 204, 203, 205, 0, 203, 203, 205, 0, 203, 203, 205, 0, 203, 203, 205, 0, 203, 203, 205, 0, 202, 202, 205, 0, 202, 201, 204, 0, 202, 202, 205, 0, 203, 202, 205, 0, 202, 202, 205, 0, 202, 202, 205, 0, 201, 201, 204, 0, 201, 201, 204, 0, 201, 201, 204, 0, 201, 201, 205, 0, 200, 200, 204, 0, 200, 200, 204, 0, 201, 201, 204, 0, 200, 200, 204, 0, 200, 200, 204, 0, 200, 199, 204, 0, 200, 200, 204, 0, 200, 199, 204, 0, 199, 199, 204, 0, 199, 199, 204, 0, 198, 198, 203, 0, 199, 198, 204, 0, 198, 198, 204, 0, 198, 197, 203, 0, 198, 198, 204, 0, 198, 197, 203, 0, 198, 197, 203, 0, 197, 196, 203, 0, 197, 196, 203, 0, 197, 196, 203, 0, 197, 196, 203, 0, 196, 196, 203, 0, 195, 195, 202, 0, 195, 195, 202, 0, 195, 194, 202, 0, 195, 194, 202, 0, 195, 194, 202, 0, 194, 194, 202, 0, 194, 194, 202, 0, 194, 194, 203, 0, 193, 192, 201, 0, 193, 193, 202, 0, 193, 192, 202, 0, 193, 192, 202, 0, 192, 191, 201, 0, 192, 191, 202, 0, 191, 191, 201, 0, 191, 190, 201, 0, 191, 191, 202, 0, 190, 190, 201, 0, 190, 189, 201, 0, 190, 189, 201, 0, 189, 189, 201, 0, 189, 188, 201, 0, 188, 188, 200, 0, 188, 187, 200, 0, 188, 187, 200, 0, 188, 187, 200, 0, 187, 186, 200, 0, 187, 186, 200, 0, 187, 186, 200, 0, 187, 185, 200, 0, 186, 185, 200, 0, 186, 185, 200, 0, 185, 184, 200, 0, 184, 183, 199, 0, 184, 182, 199, 0, 184, 183, 200, 0, 183, 182, 199, 0, 183, 182, 199, 0, 182, 181, 199, 0, 182, 181, 199, 0, 181, 180, 199, 0, 181, 179, 199, 0, 180, 179, 199, 0, 180, 178, 198, 0, 179, 178, 198, 0, 179, 178, 199, 0, 179, 177, 199, 0, 178, 176, 198, 0, 177, 175, 198, 0, 176, 175, 197, 0, 176, 174, 197, 0, 176, 174, 197, 0, 175, 173, 197, 0, 175, 173, 198, 0, 174, 172, 197, 0, 174, 172, 197, 0, 173, 170, 197, 0, 172, 170, 197, 0, 171, 169, 196, 0, 172, 169, 197, 0, 170, 168, 196, 0, 169, 167, 196, 0, 170, 168, 197, 0, 169, 166, 196, 0, 169, 166, 197, 0, 167, 165, 196, 0, 166, 164, 195, 0, 166, 163, 196, 0, 165, 162, 195, 0, 164, 162, 195, 0, 164, 161, 195, 0, 163, 160, 195, 0, 163, 160, 195, 0, 162, 159, 195, 0, 162, 159, 195, 0, 161, 158, 195, 0, 160, 157, 195, 0, 160, 156, 195, 0, 158, 155, 194, 0, 158, 154, 195, 0, 157, 153, 194, 0, 157, 153, 194, 0, 156, 152, 194, 0, 154, 150, 194, 0, 155, 151, 195, 0, 153, 149, 193, 0, 153, 149, 194, 0, 152, 148, 194, 0, 151, 146, 193, 0, 150, 146, 194, 0, 150, 145, 194, 0, 149, 144, 193, 0, 147, 142, 193, 0, 147, 142, 193, 0, 146, 140, 192, 0, 145, 139, 193, 0, 144, 139, 193, 0, 144, 138, 193, 0, 142, 137, 192, 0, 142, 135, 192, 0, 141, 135, 193, 0, 140, 133, 192, 0, 139, 132, 192, 0, 138, 131, 192, 0, 137, 130, 192, 0, 137, 130, 192, 0, 136, 129, 192, 0, 135, 127, 192, 0, 134, 126, 192, 0, 132, 125, 191, 0, 132, 124, 192, 0, 131, 123, 192, 0, 130, 122, 192, 0, 129, 120, 191, 0, 128, 120, 191, 0, 127, 118, 191, 0, 127, 118, 192, 0, 125, 115, 190, 0, 125, 115, 192, 0, 124, 114, 191, 0, 122, 112, 190, 0, 121, 111, 190, 0, 121, 111, 191, 0, 119, 108, 190, 0, 119, 108, 191, 0, 119, 107, 191, 0, 117, 106, 190, 0, 116, 105, 190, 0, 116, 104, 191, 0, 115, 103, 190, 0, 114, 101, 190, 0, 113, 100, 190, 0, 112, 99, 189, 0, 112, 98, 190, 0, 111, 98, 190, 0, 110, 97, 190, 0, 110, 96, 190, 0, 109, 95, 190, 0, 109, 95, 190, 0, 107, 93, 190, 0, 106, 92, 189, 0, 107, 92, 190, 0, 105, 90, 189, 0, 105, 90, 189, 0, 105, 90, 190, 0, 104, 89, 190, 0, 104, 88, 190, 0, 104, 88, 190, 0, 103, 87, 190, 0, 102, 86, 189, 0, 102, 85, 189, 0, 102, 86, 189, 0, 102, 86, 189, 0, 102, 85, 189, 0, 102, 85, 189, 0, 101, 85, 189, 0, 101, 85, 189, 0, 101, 85, 189, 0, 100, 84, 188, 0, 99, 82, 187, 0, 97, 81, 185, 0, 94, 78, 182, 0, 91, 75, 179, 0, 87, 71, 175, 0, 82, 67, 169, 0, 76, 63, 163, 0, 70, 57, 155, 0, 63, 51, 146, 0, 56, 45, 136, 0, 48, 38, 122, 0, 39, 31, 107, 0, 30, 24, 88, 0, 21, 16, 66, 0, 12, 9, 42, 0, 5, 3, 18, 0};
        for(int i=0;i<1024;i++)
        {
            container[i] = palette[i];
        }
    }
    else if(type == 1)
    {
        unsigned char palette[] = { 0, 0, 0, 0, 4, 3, 17, 0, 12, 9, 42, 0, 21, 16, 66, 0, 31, 24, 88, 0, 39, 31, 106, 0, 48, 38, 122, 0, 56, 45, 135, 0, 62, 50, 145, 0, 70, 57, 155, 0, 75, 61, 162, 0, 81, 66, 168, 0, 86, 71, 174, 0, 90, 75, 179, 0, 94, 78, 182, 0, 97, 81, 185, 0, 99, 83, 187, 0, 100, 84, 188, 0, 101, 85, 189, 0, 102, 85, 189, 0, 101, 85, 189, 0, 102, 85, 189, 0, 102, 85, 189, 0, 102, 86, 189, 0, 102, 85, 189, 0, 103, 86, 190, 0, 102, 86, 189, 0, 103, 87, 189, 0, 104, 88, 190, 0, 104, 88, 189, 0, 105, 89, 190, 0, 104, 89, 189, 0, 105, 90, 190, 0, 106, 91, 190, 0, 107, 92, 190, 0, 107, 93, 190, 0, 107, 93, 190, 0, 108, 94, 190, 0, 109, 95, 190, 0, 109, 95, 189, 0, 110, 96, 189, 0, 110, 97, 190, 0, 112, 99, 190, 0, 113, 100, 190, 0, 113, 101, 190, 0, 114, 101, 190, 0, 115, 103, 190, 0, 116, 104, 190, 0, 116, 104, 190, 0, 117, 105, 190, 0, 118, 107, 190, 0, 120, 109, 191, 0, 120, 109, 191, 0, 121, 111, 191, 0, 121, 111, 190, 0, 122, 112, 190, 0, 123, 113, 191, 0, 125, 115, 191, 0, 125, 115, 190, 0, 126, 117, 191, 0, 127, 118, 191, 0, 128, 119, 191, 0, 129, 121, 192, 0, 130, 121, 191, 0, 131, 123, 192, 0, 132, 124, 192, 0, 133, 125, 192, 0, 134, 126, 192, 0, 134, 127, 191, 0, 136, 128, 192, 0, 136, 129, 192, 0, 137, 130, 192, 0, 139, 132, 193, 0, 139, 132, 192, 0, 140, 134, 193, 0, 140, 134, 192, 0, 141, 135, 192, 0, 143, 137, 193, 0, 144, 138, 193, 0, 145, 139, 193, 0, 145, 139, 192, 0, 146, 140, 193, 0, 147, 141, 193, 0, 147, 142, 193, 0, 149, 143, 193, 0, 149, 144, 193, 0, 150, 146, 194, 0, 151, 147, 194, 0, 151, 147, 193, 0, 153, 148, 194, 0, 154, 149, 194, 0, 154, 150, 194, 0, 154, 150, 194, 0, 156, 152, 194, 0, 156, 152, 194, 0, 157, 153, 194, 0, 158, 155, 195, 0, 158, 155, 194, 0, 159, 155, 194, 0, 160, 157, 195, 0, 161, 157, 195, 0, 162, 158, 195, 0, 162, 159, 195, 0, 163, 159, 195, 0, 163, 160, 195, 0, 164, 161, 196, 0, 165, 162, 195, 0, 166, 163, 196, 0, 167, 164, 196, 0, 167, 165, 196, 0, 168, 165, 196, 0, 169, 166, 197, 0, 169, 166, 196, 0, 169, 166, 196, 0, 170, 167, 196, 0, 171, 169, 197, 0, 171, 169, 197, 0, 172, 170, 197, 0, 172, 170, 197, 0, 173, 171, 197, 0, 174, 172, 197, 0, 174, 172, 197, 0, 175, 173, 198, 0, 175, 173, 197, 0, 176, 174, 198, 0, 177, 175, 198, 0, 177, 176, 198, 0, 178, 176, 198, 0, 178, 176, 198, 0, 178, 176, 198, 0, 178, 177, 198, 0, 179, 178, 198, 0, 179, 178, 198, 0, 181, 179, 199, 0, 181, 180, 199, 0, 181, 180, 199, 0, 181, 180, 198, 0, 182, 181, 199, 0, 182, 181, 199, 0, 184, 182, 200, 0, 183, 182, 199, 0, 183, 182, 199, 0, 185, 184, 200, 0, 185, 184, 200, 0, 186, 185, 200, 0, 185, 184, 199, 0, 185, 184, 199, 0, 186, 185, 200, 0, 186, 186, 200, 0, 187, 186, 200, 0, 187, 186, 200, 0, 188, 187, 200, 0, 188, 188, 201, 0, 189, 188, 201, 0, 189, 189, 201, 0, 190, 189, 201, 0, 190, 189, 201, 0, 190, 190, 201, 0, 190, 189, 201, 0, 191, 190, 201, 0, 191, 190, 201, 0, 192, 191, 201, 0, 192, 191, 201, 0, 192, 191, 201, 0, 193, 193, 202, 0, 192, 192, 201, 0, 194, 193, 202, 0, 194, 193, 202, 0, 193, 193, 202, 0, 194, 194, 202, 0, 195, 194, 203, 0, 195, 194, 202, 0, 194, 194, 202, 0, 195, 195, 203, 0, 195, 195, 202, 0, 196, 195, 202, 0, 196, 196, 203, 0, 197, 196, 203, 0, 196, 196, 203, 0, 197, 196, 203, 0, 197, 197, 203, 0, 197, 197, 203, 0, 198, 197, 203, 0, 198, 197, 203, 0, 198, 197, 203, 0, 199, 198, 204, 0, 199, 199, 204, 0, 199, 199, 204, 0, 199, 199, 204, 0, 199, 199, 203, 0, 200, 200, 204, 0, 200, 199, 204, 0, 200, 200, 204, 0, 200, 199, 204, 0, 200, 200, 204, 0, 201, 200, 204, 0, 201, 201, 205, 0, 200, 200, 204, 0, 202, 201, 205, 0, 202, 201, 205, 0, 201, 201, 204, 0, 201, 201, 204, 0, 202, 202, 205, 0, 201, 201, 204, 0, 202, 202, 205, 0, 203, 203, 205, 0, 202, 202, 205, 0, 202, 202, 205, 0, 203, 203, 205, 0, 203, 203, 205, 0, 203, 203, 205, 0, 203, 203, 205, 0, 203, 203, 205, 0, 203, 203, 205, 0, 204, 204, 206, 0, 204, 204, 205, 0, 204, 204, 206, 0, 204, 204, 206, 0, 205, 205, 206, 0, 204, 204, 205, 0, 204, 204, 205, 0, 205, 205, 206, 0, 204, 204, 205, 0, 205, 204, 206, 0, 205, 205, 206, 0, 205, 205, 206, 0, 205, 205, 206, 0, 205, 205, 206, 0, 205, 205, 206, 0, 205, 205, 205, 0, 205, 205, 205, 0, 205, 205, 206, 0, 205, 205, 206, 0, 206, 206, 206, 0, 206, 206, 206, 0, 206, 206, 206, 0, 206, 206, 206, 0, 206, 206, 206, 0, 206, 206, 206, 0, 206, 206, 206, 0, 206, 206, 206, 0, 206, 206, 206, 0, 206, 206, 206, 0, 206, 206, 206, 0, 206, 206, 207, 0, 206, 206, 207, 0, 206, 206, 206, 0, 206, 206, 206, 0, 207, 207, 207, 0, 206, 206, 206, 0, 206, 206, 206, 0, 206, 206, 206, 0, 206, 206, 206, 0, 206, 206, 206, 0, 207, 207, 207, 0, 206, 206, 206, 0};
		for(int i=0;i<1024;i++)
        {
            container[i] = palette[i];
        }
    }
	else
    {
		unsigned char palette[] = { 0, 0, 0, 0, 199, 199, 203, 0, 198, 197, 203, 0, 194, 194, 202, 0, 191, 190, 201, 0, 187, 186, 200, 0, 182, 180, 198, 0, 175, 174, 196, 0, 169, 167, 195, 0, 159, 156, 191, 0, 151, 147, 190, 0, 141, 136, 186, 0, 135, 129, 184, 0, 129, 123, 182, 0, 123, 116, 180, 0, 117, 109, 177, 0, 110, 102, 174, 0, 104, 95, 171, 0, 97, 87, 167, 0, 91, 81, 164, 0, 85, 74, 161, 0, 79, 68, 156, 0, 74, 63, 152, 0, 69, 58, 148, 0, 64, 53, 143, 0, 59, 48, 137, 0, 56, 45, 132, 0, 52, 42, 126, 0, 49, 39, 121, 0, 47, 38, 118, 0, 46, 37, 115, 0, 45, 37, 114, 0, 44, 35, 111, 0, 43, 35, 109, 0, 42, 34, 107, 0, 41, 34, 105, 0, 40, 33, 103, 0, 39, 31, 101, 0, 38, 30, 99, 0, 37, 30, 97, 0, 36, 29, 94, 0, 35, 28, 92, 0, 34, 27, 90, 0, 34, 27, 89, 0, 33, 27, 87, 0, 32, 26, 85, 0, 31, 25, 83, 0, 31, 25, 82, 0, 30, 25, 80, 0, 29, 24, 78, 0, 28, 23, 76, 0, 28, 23, 75, 0, 28, 23, 74, 0, 27, 22, 73, 0, 27, 22, 72, 0, 25, 21, 69, 0, 25, 20, 68, 0, 25, 21, 67, 0, 25, 21, 67, 0, 24, 20, 65, 0, 24, 19, 64, 0, 24, 20, 64, 0, 24, 20, 63, 0, 24, 20, 62, 0, 23, 19, 61, 0, 23, 19, 61, 0, 23, 19, 61, 0, 23, 19, 60, 0, 23, 19, 60, 0, 22, 18, 59, 0, 23, 19, 59, 0, 22, 19, 59, 0, 22, 18, 58, 0, 23, 19, 59, 0, 22, 18, 58, 0, 22, 19, 58, 0, 22, 18, 58, 0, 22, 18, 58, 0, 22, 18, 58, 0, 23, 19, 58, 0, 22, 19, 58, 0, 22, 18, 58, 0, 22, 18, 58, 0, 22, 18, 58, 0, 22, 18, 58, 0, 22, 18, 58, 0, 22, 18, 58, 0, 22, 19, 58, 0, 23, 19, 59, 0, 22, 18, 58, 0, 22, 18, 58, 0, 22, 19, 59, 0, 22, 18, 59, 0, 22, 18, 58, 0, 22, 19, 59, 0, 22, 18, 59, 0, 22, 18, 59, 0, 23, 19, 60, 0, 22, 18, 59, 0, 22, 18, 59, 0, 23, 19, 60, 0, 22, 19, 59, 0, 23, 19, 60, 0, 22, 18, 59, 0, 22, 18, 60, 0, 22, 18, 60, 0, 23, 19, 61, 0, 23, 19, 60, 0, 23, 19, 61, 0, 23, 19, 61, 0, 24, 20, 62, 0, 23, 19, 62, 0, 24, 20, 62, 0, 23, 19, 62, 0, 23, 19, 62, 0, 23, 19, 62, 0, 24, 20, 63, 0, 24, 19, 63, 0, 24, 20, 64, 0, 24, 20, 64, 0, 25, 20, 65, 0, 24, 20, 65, 0, 24, 20, 65, 0, 25, 20, 66, 0, 25, 20, 66, 0, 25, 20, 66, 0, 25, 21, 67, 0, 26, 21, 68, 0, 25, 21, 68, 0, 25, 21, 68, 0, 25, 21, 68, 0, 25, 21, 68, 0, 26, 21, 69, 0, 26, 21, 69, 0, 27, 22, 71, 0, 27, 22, 71, 0, 27, 22, 71, 0, 26, 21, 71, 0, 27, 22, 72, 0, 27, 22, 73, 0, 28, 23, 74, 0, 27, 22, 74, 0, 27, 22, 74, 0, 29, 23, 76, 0, 28, 23, 76, 0, 29, 24, 77, 0, 28, 23, 77, 0, 28, 23, 77, 0, 29, 24, 78, 0, 29, 24, 79, 0, 29, 24, 79, 0, 30, 24, 80, 0, 30, 24, 81, 0, 31, 25, 82, 0, 31, 25, 83, 0, 31, 26, 84, 0, 32, 26, 84, 0, 32, 26, 85, 0, 32, 26, 86, 0, 32, 26, 86, 0, 33, 27, 87, 0, 33, 26, 87, 0, 33, 27, 88, 0, 33, 27, 89, 0, 33, 27, 89, 0, 35, 28, 91, 0, 34, 27, 91, 0, 35, 29, 93, 0, 36, 29, 93, 0, 35, 28, 93, 0, 36, 29, 95, 0, 37, 30, 96, 0, 37, 30, 96, 0, 36, 29, 96, 0, 38, 30, 98, 0, 37, 30, 98, 0, 38, 31, 99, 0, 39, 31, 100, 0, 39, 32, 101, 0, 39, 32, 102, 0, 39, 32, 102, 0, 40, 33, 104, 0, 40, 32, 104, 0, 41, 33, 105, 0, 41, 33, 106, 0, 41, 33, 107, 0, 42, 34, 108, 0, 43, 35, 109, 0, 43, 35, 109, 0, 43, 35, 110, 0, 43, 35, 111, 0, 45, 36, 112, 0, 45, 36, 113, 0, 45, 37, 114, 0, 45, 36, 114, 0, 46, 37, 116, 0, 47, 38, 116, 0, 47, 38, 118, 0, 47, 38, 117, 0, 49, 39, 120, 0, 49, 40, 121, 0, 50, 40, 123, 0, 51, 41, 125, 0, 53, 43, 127, 0, 53, 43, 128, 0, 55, 45, 132, 0, 57, 46, 134, 0, 57, 47, 135, 0, 59, 48, 137, 0, 61, 50, 139, 0, 62, 51, 140, 0, 63, 52, 142, 0, 65, 54, 144, 0, 66, 55, 145, 0, 68, 57, 147, 0, 70, 59, 149, 0, 72, 61, 151, 0, 74, 63, 153, 0, 76, 65, 154, 0, 78, 67, 156, 0, 79, 68, 157, 0, 81, 70, 158, 0, 84, 73, 160, 0, 85, 74, 161, 0, 87, 77, 162, 0, 90, 80, 164, 0, 92, 81, 165, 0, 94, 84, 166, 0, 96, 86, 168, 0, 98, 89, 169, 0, 100, 91, 169, 0, 102, 93, 170, 0, 105, 96, 172, 0, 107, 98, 173, 0, 109, 101, 174, 0, 112, 103, 175, 0, 113, 106, 176, 0, 116, 108, 177, 0, 118, 111, 178, 0, 120, 113, 179, 0, 122, 115, 179, 0, 125, 118, 181, 0, 127, 121, 182, 0, 129, 123, 182, 0, 131, 125, 183, 0, 134, 128, 184, 0, 136, 130, 185, 0, 137, 132, 185, 0, 140, 135, 186, 0, 142, 137, 187, 0, 156, 152, 191, 0, 167, 165, 194, 0, 178, 176, 197, 0, 185, 184, 199, 0, 191, 191, 201, 0, 197, 197, 203, 0};
		for(int i=0;i<1024;i++)
        {
            container[i] = palette[i];
        }
    }
}


void toBMP8bit(unsigned char* img, int w, int h, char* filename, int clr)
{
	FILE* output = fopen(filename, "wb");

	unsigned char* header = (unsigned char*)malloc(14 * sizeof(unsigned char));
	unsigned char* dib_hd = (unsigned char*)malloc(40 * sizeof(unsigned char));
    unsigned char* palette = (unsigned char*)malloc(1024 * sizeof(unsigned char));;
    palette8(palette,clr);
	unsigned char padding = (4 - w % 4) % 4;
	
	int filesize = 0;
	filesize += 14;					//bmp header size
	filesize += 40;					//dib header size
    filesize += 1024;               //pallette info
	filesize += w * h;              //size of the actual image
	filesize += h * padding;		//padding size

	int offset = 14 + 40 + 1024;

	header[0] = 'B';				//some header, idk exactly what is up with it
	header[1] = 'M';
	
	header[2] = filesize;			//file size
	header[3] = filesize >> 8;
	header[4] = filesize >> 16;
	header[5] = filesize >> 24;
	
	header[6] = 0;					//reserved 1, not used
	header[7] = 0;
	
	header[8] = 0;					//reserved 2, not used
	header[9] = 0;

	header[10] = offset;			//file size
	header[11] = offset >> 8;
	header[12] = offset >> 16;
	header[13] = offset >> 24;

	dib_hd[0] = 40;					//header size
	dib_hd[1] = 0;
	dib_hd[2] = 0;
	dib_hd[3] = 0;

	dib_hd[4] = w;					//image width
	dib_hd[5] = w>>8;
	dib_hd[6] = w>>16;
	dib_hd[7] = w>>24;

	dib_hd[8] = h;					//image height
	dib_hd[9] = h >> 8;
	dib_hd[10] = h >> 16;
	dib_hd[11] = h >> 24;

	dib_hd[12] = 1;					//planes
	dib_hd[13] = 0;

	dib_hd[14] = 8;					//bits per pixel 
	dib_hd[15] = 0;

	dib_hd[16] = 0;					//compression (none)
	dib_hd[17] = 0;
	dib_hd[18] = 0;
	dib_hd[19] = 0;

	dib_hd[20] = 0;					//image size with compression
	dib_hd[21] = 0; 
	dib_hd[22] = 0;
	dib_hd[23] = 0;

	dib_hd[24] = 0;					//x pixels per meter
	dib_hd[25] = 0;
	dib_hd[26] = 0;
	dib_hd[27] = 0;

	dib_hd[28] = 0;					//y pixels per meter
	dib_hd[29] = 0;
	dib_hd[30] = 0;
	dib_hd[31] = 0;

	dib_hd[32] = 0;					//total colors - default
	dib_hd[33] = 0;
	dib_hd[34] = 0;
	dib_hd[35] = 0;

	dib_hd[36] = 0;					//important colors - none
	dib_hd[37] = 0;
	dib_hd[38] = 0;
	dib_hd[39] = 0;

	for (int i = 0; i < 14; i++)
		putc(header[i], output);

	for (int i = 0; i < 40; i++)
		putc(dib_hd[i], output);
    
    for (int i = 0; i < 1024; i++)
		putc(palette[i], output);

	for (int i = 0; i < h; i++)
	{
		
		for (int j = 0; j < w; j++)
		{
			int c = img[i * w + j];
            putc(c,output);
		}

		for (int j = 0; j < padding; j++)
			putc(0, output);

	}
	free(header);
    free(dib_hd);
}